#!/usr/bin/env python3
# -----------------------------------------------------------------------------
# vsop.py
#
# VSOP Main
#
# VERSION:
#   v1.0: original
#   v2.0: handle parser
#
# ----------------------------------------------------------------------------
# __author__  = "Adrien and Kevin"
# __version__ = '2.0'
__author__  = "Adrien"
__version__ = '3.0'

import sys
from vsop_lexer import VsopLexer, LexicalError
from vsop_parser import VsopParser, ParseError
from vsop_sem import VsopSem, SemError

class Style:
    OK = '\033[92m'
    WARNING = '\x1b[93m'
    ERROR = '\033[91m'
    ENDC = '\x1b[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_token(tokens):
    for t in tokens:
        if(t.type == "type_identifier"):
            print(f"{t.lineno},{t.column},type-identifier,{t.value}")
        elif(t.type == "object_identifier"):
            print(f"{t.lineno},{t.column},object-identifier,{t.value}")
        elif(t.type == "integer_literal"):
            print(f"{t.lineno},{t.column},integer-literal,{t.value}")
        elif(t.type == "string_literal"):
            print(f"{t.lineno},{t.column},string-literal,{t.value}")
        elif(t.type == "lower_equal"):
            print(f"{t.lineno},{t.column},lower-equal")
        else:
            print(f"{t.lineno},{t.column},{t.type}")

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def print_error(errors,f):
    for er in errors:
        eprint(f,":",er.line,":",er.column,": lexical error:",er.description,sep="")

def main(argv):
    mode = 0
    files = []

    for arg in argv:
        if arg == '-h':
            print("vsop.py -lex | -parse <inputfile>")
            exit()
        elif arg in ("-lex", "--lexer"):
            mode = 1
        elif arg in ("-parse", "--parser"):
            mode = 2
        elif arg in ("-check"):
            mode = 3
        elif arg in ("-llvm"):
            mode = 4
        else:
            files.append(arg)

    if mode == 0:
        print(Style.WARNING + "You must use one option"
            + Style.ENDC)
        print("Usage: vsop.py -lex | -parse <inputfile>")
        exit(1)
    if not files:
        print(Style.WARNING + "You must provide at least one file" + Style.ENDC)
        print("Usage: vsop.py -lex <inputfile>")
        exit(1)

    for f in files:
        with open(f, 'r') as file:
            text = file.read()
            file.close()
            if mode == 1:
                lexer = VsopLexer()
                tokens,errors = lexer.tokenize(text)
                print_error(errors,f)
                print_token(tokens)
                if errors:
                    exit(1)
            if mode >= 2:
                parser = VsopParser()
                prog, parse_errors, lex_errors = parser.parse(text)

                print_error(lex_errors,f)
                for e in parse_errors:
                    print(f"{f}:{e}", file=sys.stderr)
                
                if parse_errors or lex_errors:
                    exit(1)
                if mode == 2:
                    print(prog)

            if mode >= 3:
                sem_analyser = VsopSem()
                analysed, sem_errors = sem_analyser.semantic_analysis(prog)
                for e in sem_errors:
                    print(f"{f}:{e}", file=sys.stderr)
                if sem_errors:
                    exit(1)
                if mode == 3:
                    print(analysed)
            if mode == 4:
                print("Not implemented")
            
                


if __name__ == "__main__":
    main(sys.argv[1:])
