
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and assign bool class colon comma div do dot else eof equal extends false if in int32 integer_literal isnull lbrace let lower lower_equal lpar minus new not object_identifier plus pow rbrace rpar semicolon string string_literal then times true type_identifier unit whileexpression : if expression then expression\n                    | object_identifier\n                    | literal\n                    | object_identifier lpar args rparargs : expression\n            | args comma expressionliteral : integer_literal\n               | string_literal\n               | boolean_literalboolean_literal : true \n                       | falseempty :'
    
_lr_action_items = {'if':([0,2,11,12,17,],[2,2,2,2,2,]),'object_identifier':([0,2,11,12,17,],[3,3,3,3,3,]),'integer_literal':([0,2,11,12,17,],[5,5,5,5,5,]),'string_literal':([0,2,11,12,17,],[6,6,6,6,6,]),'true':([0,2,11,12,17,],[8,8,8,8,8,]),'false':([0,2,11,12,17,],[9,9,9,9,9,]),'$end':([1,3,4,5,6,7,8,9,15,16,],[0,-2,-3,-7,-8,-9,-10,-11,-1,-4,]),'then':([3,4,5,6,7,8,9,10,15,16,],[-2,-3,-7,-8,-9,-10,-11,12,-1,-4,]),'rpar':([3,4,5,6,7,8,9,13,14,15,16,18,],[-2,-3,-7,-8,-9,-10,-11,16,-5,-1,-4,-6,]),'comma':([3,4,5,6,7,8,9,13,14,15,16,18,],[-2,-3,-7,-8,-9,-10,-11,17,-5,-1,-4,-6,]),'lpar':([3,],[11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,11,12,17,],[1,10,14,15,18,]),'literal':([0,2,11,12,17,],[4,4,4,4,4,]),'boolean_literal':([0,2,11,12,17,],[7,7,7,7,7,]),'args':([11,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> if expression then expression','expression',4,'p_expression','vsop_parser.py',43),
  ('expression -> object_identifier','expression',1,'p_expression','vsop_parser.py',44),
  ('expression -> literal','expression',1,'p_expression','vsop_parser.py',45),
  ('expression -> object_identifier lpar args rpar','expression',4,'p_expression','vsop_parser.py',46),
  ('args -> expression','args',1,'p_args','vsop_parser.py',55),
  ('args -> args comma expression','args',3,'p_args','vsop_parser.py',56),
  ('literal -> integer_literal','literal',1,'p_literal','vsop_parser.py',68),
  ('literal -> string_literal','literal',1,'p_literal','vsop_parser.py',69),
  ('literal -> boolean_literal','literal',1,'p_literal','vsop_parser.py',70),
  ('boolean_literal -> true','boolean_literal',1,'p_boolean_literal','vsop_parser.py',75),
  ('boolean_literal -> false','boolean_literal',1,'p_boolean_literal','vsop_parser.py',76),
  ('empty -> <empty>','empty',0,'p_empty','vsop_parser.py',85),
]
